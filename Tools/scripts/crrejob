#!/usr/bin/env python

import sys, time, optparse
from JMTucker.Tools.CRABTools import CrabError, crab_dir_from_argv, crab_jobs_from_argv, crab_get_output_files_for_job, crab_cleanup_aborted_job, confirm_cmd, crabify_list

########################################################################

parser = optparse.OptionParser(usage='%prog [options] <crab dir> <list of jobs>')
parser.add_option('--force', action='store_true', default=False,
                  help='Use -forceResubmit on all jobs regardless of their status.')
parser.add_option('--doit', action='store_true', default=False,
                  help='Actually carry out the resubmission instead of just printing what should be done.')
parser.add_option('--extra', default='',
                  help='Extra options to pass to crab (the most useful being site control, e.g. GRID.ce_black_list=...)')
options, args = parser.parse_args()
#print options ; print args ; import sys ; print sys.argv ; raise 1

########################################################################

try:
    dir = crab_dir_from_argv()
except CrabError:
    print 'Missing crab directory!\n'
    parser.print_help()
    sys.exit(1)

jobs = crab_jobs_from_argv()
if not jobs:
    print 'Missing list of jobs!\n'
    parser.print_help()
    sys.exit(1)

uniq = 'crrejobat%i' % time.time()

to_force = []
to_resub = []

for job in jobs:
    files = crab_get_output_files_for_job(dir, job)
    print 'job %i:' % job, ' '.join(files)
    if not files or options.force:
        to_force.append(job)
    else:
        to_resub.append(job)
    if options.doit:
        crab_cleanup_aborted_job(dir, job, uniq)

n = 500
if to_force:
    for i in xrange(0, len(to_force), n):
        these_jobs = jobs[i:i+n]
        confirm_cmd('crab -c %s %s -forceResubmit %s' % (dir, options.extra, crabify_list(these_jobs)), options.doit)
if to_resub:
    for i in xrange(0, len(to_resub), n):
        these_jobs = jobs[i:i+n]
        confirm_cmd('crab -c %s %s -resubmit %s'      % (dir, options.extra, crabify_list(these_jobs)), options.doit)

if not options.doit and not 'doit' in sys.argv:
    print '\nre-run with --doit if this is right.'
